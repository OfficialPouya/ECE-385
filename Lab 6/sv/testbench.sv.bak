module testbench();
timeunit 10ns;
timeprecision 1ns;
//inputs
logic [15:0] in1_16, in2_16, in3_16, in4_16;
logic [2:0] in1_3, in2_3;

logic [10:0] insext10_0;
logic [8:0] insext8_0;
logic [5:0] insext5_0;
logic [4:0] insext4_0;
logic [15:0] inzext15_0;


logic [1:0] sel_10;
logic sel;

logic PC_sel, MDR_sel, ALU_sel, MARMUX_sel;

//outputs
logic [15:0] pc_out, bus_out, adr1_out, adr2_out, sr2_out, mdr_out;
logic [2:0] sr1_out, dr_out;
logic [15:0] sext10_0, sext8_0, sext5_0, sext4_0;
logic [19:0] zext15_0;


//initialize modules
sext10_0 s10_0(.in(insext10_0), .out(sext10_0));
sext8_0 s8_0(.in(insext8_0), .out(sext8_0));
sext5_0 s5_0(.in(insext5_0), .out(sext5_0));
sext4_0 s4_0(.in(insext4_0), .out(sext4_0));
zext15_0 z15_0(.in(inzext15_0), .out(zext15_0));

pc_mux pc_m(.sel(sel_10), .curr_pc(in1_16), .bus(in2_16), .adder(in3_16),.out(pc_out));
bus_mux bus_m(.gate_PC(PC_sel), .gate_MDR(MDR_sel), .gate_ALU(ALU_sel), .gate_MARMUX(MARMUX_sel), 
			.PC(in1_16), .MDR(in2_16), .ALU(in3_16), .MARMUX(in4_16), .out(bus_out));
dr_mux dr_m(.sel(sel), .IR11_9(in1_3), .out(dr_out));
adr1_mux adr1_m(.sel(sel), .PC(in1_16), .SR1_out(in2_16), .out(adr1_out));
adr2_mux adr2_m(.sel(sel_10), .SEXT10_0(in1_16), .SEXT8_0(in2_16), .SEXT5_0(in3_16), .out(adr2_out));
sr1_mux sr1_m(.sel(sel), .IR11_9(in1_3), .IR8_6(in2_3), .out(sr1_out));
sr2_mux sr2_m(.sel(sel), .SR2_out(in1_16), .SEXT4_0(in2_16), .out(sr2_out));
mdr_mux mdr_m(.sel(sel), .bus(in1_16), .mem2IO(in2_16), .out(mdr_out));

// Clock initialization

logic Clk; // Clock
always begin : CLOCK_GENERATION
#1 Clk = ~Clk;
end

initial begin: CLOCK_INITIALIZATION
Clk = 0;
end 





initial begin: TEST_VECTORS
//Default MUX inputs
in1_16= 4'h5691;
in2_16= 4'h1010;
in3_16= 4'h5210;
in4_16= 4'h7890;

in1_3= 3'b101;
in2_3= 3'b001;

//Cycle through select bits;
sel_10 = 2'b00;
#2 sel_10 = 2'b01;
#2 sel_10 = 2'b10;
#2 sel_10 = 2'b11;
#2 sel= 1'b0;
#2 sel = 1'b1;

//cycle through SEXT cases
#2  insext10_0= 11'b01111111111;
	insext8_0= 9'b011111111;
	insext5_0= 6'b011111;
	insext4_0= 5'b01111;
	
#2  insext10_0= 11'b11111111111;
	insext8_0= 9'b111111111;
	insext5_0= 6'b111111;
	insext4_0= 5'b11111;
	
//test ZEXT
#2  inzext15_0 =16'b1111111111111111;
end

endmodule